{"version":3,"sources":["util/actions/sessionActions.tsx","util/constants/session.tsx","util/constants/index.tsx","components/MainLoader.tsx","util/history.tsx","views/layouts/default/components/NavBar.tsx","views/layouts/default/components/Loader.tsx","util/routes.tsx","views/layouts/default/DefaultLayout.tsx","util/reducers/index.tsx","util/reducers/session.tsx","util/store/configureStore.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SESSION_LOGIN","SESSION_LOGOUT","sessionLogin","authToken","dispatch","type","initialState","userData","STRIPE_PUBLIC_KEY","useStyles","makeStyles","theme","root","backgroundColor","palette","primary","main","minHeight","zIndex","MainLoader","classes","className","createBrowserHistory","boxShadow","flexGrow","signOutButton","marginLeft","spacing","title","color","textDecoration","logoLink","paddingLeft","paddingRight","toolbar","alignContent","textAlign","NavBar","props","store","useStore","rest","onSidebarOpen","useCookies","removeSessionCookie","snackbar","useSnackbar","useState","isLoggedIn","setIsLoggedIn","useEffect","state","getState","console","log","session","AppBar","clsx","Toolbar","to","Typography","variant","display","align","IconButton","onClick","enqueueSnackbar","anchorOrigin","horizontal","vertical","history","push","Loader","show","setShow","setTimeout","duration","Hidden","implementation","LinearProgress","style","height","routes","path","component","onSideBarOpen","this","fallback","renderRoutes","route","React","Component","exact","lazy","combineReducers","action","actions","configureStore","preloadedState","middlewares","thunkMiddleware","middlewareEnhancer","applyMiddleware","enhancers","composedEnhancers","compose","createStore","rootReducer","App","maxSnack","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3615149f.chunk.js","sourcesContent":["import { ReduxDispatcher } from \"../interfaces\";\r\n\r\n\r\nexport const SESSION_LOGIN = \"SESSION_LOGIN\";\r\nexport const SESSION_LOGOUT = \"SESSION_LOGOUT\";\r\n\r\n\r\nexport const sessionLogin = (authToken: string) => (dispatch: ReduxDispatcher) => dispatch({\r\n    type: SESSION_LOGIN,\r\n    authToken\r\n});\r\n\r\nexport const sessionLogout = () => (dispatch: ReduxDispatcher) => dispatch({\r\n    type: SESSION_LOGOUT\r\n});\r\n","export const initialState = {\r\n    authToken: null,\r\n    userData: null\r\n};\r\n","export * from \"./session\";\r\nexport const STRIPE_PUBLIC_KEY = \"pk_test_51ILBKjE3PATAwyWiEHcP5b6MV18yAuonQBNENrjEtI8mTqA8afj2M3axECzfHgrUcF8gh0sBbpBLHfaMXDaQVgbn00QWBJ5JeN\";\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        backgroundColor: theme.palette.primary.main,\r\n        minHeight: \"100vh\",\r\n        zIndex: 10000\r\n    }\r\n}));\r\n\r\nconst MainLoader = () => {\r\n    const classes = useStyles();\r\n    \r\n    return <div className={ classes.root }/>;\r\n};\r\n\r\nexport default MainLoader;\r\n","import { createBrowserHistory } from \"history\";\r\n\r\n\r\nexport default createBrowserHistory({});\r\n","import React, { MouseEventHandler, useEffect, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { AppBar, IconButton, Toolbar, Typography } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport InputIcon from \"@material-ui/icons/Input\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useCookies } from \"react-cookie\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport history from \"../../../../util/history\";\r\nimport { useStore } from \"react-redux\";\r\n\r\n\r\nexport declare type Props = {\r\n    className?: string;\r\n    onSidebarOpen: MouseEventHandler;\r\n    [key: string]: unknown;\r\n}\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        boxShadow: \"none\",\r\n        backgroundColor: \"#322d2d\"\r\n    },\r\n    flexGrow: {\r\n        flexGrow: 1\r\n    },\r\n    signOutButton: {\r\n        marginLeft: theme.spacing(2)\r\n    },\r\n    title: {\r\n        color: \"white\",\r\n        textDecoration: \"none\"\r\n    },\r\n    logoLink: {\r\n        textDecoration: \"none\",\r\n        paddingLeft: \"auto\",\r\n        paddingRight: \"auto\"\r\n    },\r\n    toolbar: {\r\n        alignContent: \"center\",\r\n        textAlign: \"center\"\r\n    }\r\n}));\r\n\r\nexport default function NavBar (props: Props) {\r\n    const store = useStore();\r\n    const { className, onSidebarOpen, ...rest } = props;\r\n    const classes = useStyles();\r\n    const [ sessionCookie, setSessionCookie, removeSessionCookie ] = useCookies();\r\n    const snackbar = useSnackbar();\r\n    const [ isLoggedIn, setIsLoggedIn ] = useState(false);\r\n    \r\n    useEffect(() => {\r\n        const state = store.getState();\r\n        console.log(state);\r\n        \r\n        if (state.session.authToken) {\r\n            setIsLoggedIn(true);\r\n        } else {\r\n            setIsLoggedIn(false);\r\n        }\r\n    }, []);\r\n    \r\n    const handleSignOut = () => {\r\n        removeSessionCookie(\"session\");\r\n        snackbar.enqueueSnackbar(\r\n            \"You're now logged out\",\r\n            {\r\n                variant: \"success\",\r\n                anchorOrigin: {\r\n                    horizontal: \"center\",\r\n                    vertical: \"bottom\"\r\n                }\r\n            }\r\n        );\r\n        history.push(\"/\");\r\n    };\r\n    \r\n    return (\r\n        <AppBar\r\n            { ...rest }\r\n            className={ clsx(classes.root, className) }\r\n        >\r\n            <Toolbar className={ classes.toolbar }>\r\n                <Link to=\"/\" className={ classes.logoLink }>\r\n                    <Typography\r\n                        variant=\"h4\"\r\n                        display=\"inline\"\r\n                        align=\"center\"\r\n                        className={ classes.title }\r\n                    >\r\n                        TradingJEDI\r\n                    </Typography>\r\n                </Link>\r\n                <div className={ classes.flexGrow }/>\r\n                {\r\n                    isLoggedIn ? (\r\n                        <IconButton\r\n                            className={ classes.signOutButton }\r\n                            color=\"inherit\"\r\n                            onClick={ handleSignOut }\r\n                        >\r\n                            <InputIcon/>\r\n                        </IconButton>\r\n                    ) : null\r\n                }\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n","import { Hidden, LinearProgress } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        minHeight: \"100vh\"\r\n    }\r\n}));\r\n\r\nconst Loader = (props: { duration?: number }) => {\r\n    const classes = useStyles();\r\n    const [ show, setShow ] = useState(false);\r\n    useEffect(() => {\r\n        setTimeout(() => setShow(true), props.duration || 1000);\r\n    });\r\n    \r\n    return <div className={ classes.root }>\r\n        {\r\n            show && <Hidden implementation=\"js\">\r\n                <LinearProgress style={ { height: 4, color: \"#cf1717\", backgroundColor: \"#008eff\" } }/>\r\n            </Hidden>\r\n        }\r\n    </div>;\r\n};\r\n\r\nexport default Loader;\r\n","import React, { lazy } from \"react\";\r\nimport { RouteConfig } from \"react-router-config\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport DefaultLayout from \"../views/layouts/default/DefaultLayout\";\r\n\r\n\r\nconst routes = [\r\n    {\r\n        path: \"/\",\r\n        component: DefaultLayout,\r\n        routes: [\r\n            {\r\n                path: \"/\",\r\n                exact: true,\r\n                component: lazy(() => import(\"../views/pages/default/index\"))\r\n            },\r\n            {\r\n                path: \"*\",\r\n                component: () => <Redirect to=\"/\"/>\r\n            }\r\n        ] as unknown as RouteConfig[]\r\n    }\r\n] as unknown as RouteConfig[];\r\n\r\nexport default routes;\r\n","import React, { Suspense, useEffect } from \"react\";\r\nimport NavBar from \"./components/NavBar\";\r\nimport { renderRoutes } from \"react-router-config\";\r\nimport Loader from \"./components/Loader\";\r\n\r\n\r\nclass DefaultLayout extends React.Component<any, any> {\r\n    constructor (props: unknown) {\r\n        super(props);\r\n    }\r\n    \r\n    onSideBarOpen = () => {\r\n    \r\n    };\r\n    \r\n    render () {\r\n        return (\r\n            <>\r\n                <NavBar\r\n                    onSidebarOpen={this.onSideBarOpen}\r\n                />\r\n                <Suspense fallback={ <Loader/> }>\r\n                    {\r\n                        renderRoutes(this.props.route.routes)\r\n                    }\r\n                </Suspense>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default DefaultLayout;\r\n","import { combineReducers } from \"redux\";\r\nimport session from \"./session\";\r\n\r\n\r\nexport default combineReducers({\r\n    session\r\n});\r\n","import * as actions from \"../actions\";\r\nimport { initialState } from \"../constants\";\r\n\r\n\r\nexport default function (state = initialState, action: any) {\r\n    console.log(\"REDUCER:\", action.type, action);\r\n    \r\n    switch (action.type) {\r\n        case actions.SESSION_LOGIN: {\r\n            console.log(\"logging in\");\r\n            console.log(state, action.session);\r\n            console.log({ ...state, ...action.session });\r\n            \r\n            return {\r\n                ...state\r\n            };\r\n        }\r\n        \r\n        case actions.SESSION_LOGOUT: {\r\n            return {\r\n                ...state,\r\n                ...action.session\r\n            };\r\n        }\r\n        \r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n","import { applyMiddleware, compose, createStore } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport rootReducer from \"../reducers\";\r\n\r\n\r\nfunction configureStore (preloadedState = {}) {\r\n    const middlewares = [ thunkMiddleware ];\r\n    const middlewareEnhancer = applyMiddleware(...middlewares);\r\n    const enhancers = [ middlewareEnhancer ];\r\n    const composedEnhancers = compose(...enhancers);\r\n    \r\n    return createStore(\r\n        // @ts-ignore\r\n        rootReducer,\r\n        preloadedState,\r\n        // @ts-ignore\r\n        composedEnhancers\r\n    );\r\n}\r\n\r\nexport default configureStore();\r\n","import { SnackbarProvider } from \"notistack\";\r\nimport * as React from \"react\";\r\nimport { Provider as StoreProvider } from \"react-redux\";\r\nimport { renderRoutes } from \"react-router-config\";\r\nimport { Router } from \"react-router-dom\";\r\nimport MainLoader from \"./components/MainLoader\";\r\nimport history from \"./util/history\";\r\nimport routes from \"./util/routes\";\r\nimport store from \"./util/store\";\r\n\r\n\r\ndeclare type AppProps = {};\r\n\r\nexport default function App (props: AppProps) {\r\n    return (\r\n        <StoreProvider store={ store }>\r\n            <SnackbarProvider maxSnack={ 5 }>\r\n                <Router history={ history }>\r\n                    <React.Suspense fallback={ <MainLoader/> }>\r\n                        {\r\n                            renderRoutes(routes)\r\n                        }\r\n                    </React.Suspense>\r\n                </Router>\r\n            </SnackbarProvider>\r\n        </StoreProvider>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register (config: any) {\r\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL!, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener(\"load\", () => {\r\n            const swUrl = `${ process.env.PUBLIC_URL! }/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        \"This web app is being served cache-first by a service \" +\r\n                        \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW (swUrl: string, config: any) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === \"installed\") {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                \"New content is available and will be used when all \" +\r\n                                \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log(\"Content is cached for offline use.\");\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error(\"Error during service worker registration:\", error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl: string, config: any) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { \"Service-Worker\": \"script\" }\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get(\"content-type\");\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                \"No internet connection found. App is running in offline mode.\"\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister () {\r\n    if (\"serviceWorker\" in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport \"./global.css\";\r\nimport { unregister } from \"./serviceWorker\";\r\n\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nunregister();\r\n"],"sourceRoot":""}